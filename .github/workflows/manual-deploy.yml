name: Deploy helm-packages (Manual)

on:
  workflow_call:
    inputs:
      TARGET_BRANCH:
        description: "The target branch"
        default: ""
        type: string
  workflow_dispatch: # deploy on demand
    inputs:
      cluster_name:  # We set up the environment for our cluster.
        description: "Which cluster to deploy to?"
        type: choice  # drop-down menus are fantastic!
        required: true
        options:  # change these to your own names or change :point_up: to a `string` for freeform entry.
        - "argocd"
        - "test-cluster-1"
        - "production" 
        default: "argocd"
      helm-chart_name:  # name our runner set
        # In this repository, this corresponds to the helm chart name in `/deployments/helm-***.yml`.
        # e.g., `ubi8` would target `/deployments/helm-ubi8.yml`
        description: "Which scale set to deploy?"
        default: "guestbook"
        type: choice
        required: true
        options:  # change these to your own names or change :point_up: to a `string` for freeform entry.
        - "guestbook"
        - "grafana"
        - "argo-cd" 
        - "kube-prometheus" 
        - "cert-manager"
      environment_name:  # this corresponds to the environments we set up for our `kubeconfig` files
        description: "Which environment to deploy to?"
        type: choice  # drop-down menus are fantastic!
        required: true
        options:  # change these to your own names or change :point_up: to a `string` for freeform entry.
        - "ghcr"
        - "awsecr"
        - "production" 
        default: "ghcr"
      runner_namespace:
        description: "Which namespace to deploy to?"
        type: choice
        required: true
        options:  # again, change this to your own namespaces
        - "runners"
        - "argocd"
        - "certmanager"
        - "test"
        default: "test"

jobs:
  Deploy:
    name: Deploy [${{ github.event.inputs.helm-chart_name }}] on cluster [${{ github.event.inputs.cluster_name }}]
    runs-on: [self-hosted, Linux, X64] # use the GitHub hosted runners to deploy the self-hosted runners in GHEC
    # If using GHES or GHAE, use another deployment, such as having CentOS redeploy Ubuntu and vice versa
    environment: ${{ github.event.inputs.environment_name }}

    steps:
    - name: Check if K3d cluster [${{ github.event.inputs.cluster_name }}] exists
      id: check-cluster
      run: |
        if k3d cluster list | grep -q ${{ github.event.inputs.cluster_name }}; then
          echo "Cluster already exists."
          echo "EXISTS=true" >> $GITHUB_ENV
        else
          echo "Cluster does not exist."
          echo "EXISTS=false" >> $GITHUB_ENV
        fi
    - name: Create K3d cluster [${{ github.event.inputs.cluster_name }}] (if not exists)
      if: env.EXISTS == 'false'
      uses: AbsaOSS/k3d-action@v2
      with:
        k3d-version: v5.8.1
        cluster-name: ${{ github.event.inputs.cluster_name }}
        args: >-
          --agents 2
          --port "80:80\@loadbalancer --port 443:443\@loadbalancer"
          --api-port "localhost:$(shuf -i 10000-65535 -n 1)"
    - name: Ensure kubeconfig is set to the correct cluster
      run: |
        kubectl config use-context k3d-${{ github.event.inputs.cluster_name }}
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Publish helm-chart [${{ github.event.inputs.helm-chart_name }}] 
      env:
        USERNAME: "${{ secrets.USERNAME }}"
        GITHUB_TOKEN_REGISTRY: "${{ secrets.REGISTRY_ACCESS_TOKEN }}"
        CHARTS_REPO: "oci://ghcr.io/devops-teamspace/${{ github.event.inputs.helm-chart_name }}"
        VERSION: ${{ github.ref_name }}
        HELM_EXPERIMENTAL_OCI: '1'
      run: |
        CHART_VERSION=$(echo $(helm show chart ./charts/${{ github.event.inputs.helm-chart_name }} | grep '^version:' | cut -d ' ' -f2))
        echo $GITHUB_TOKEN_REGISTRY | helm registry login ghcr.io/devops-teamspace --username $USERNAME --password-stdin
        helm install "${{ github.event.inputs.helm-chart_name }}" \
        --namespace "${{ github.event.inputs.runner_namespace }}" --create-namespace \
        $CHARTS_REPO --version $CHART_VERSION
