name: Push various oci helm-charts
on:
  workflow_dispatch:
    inputs:
      BUILD_ENV:
        description: 'The target build environment'
        required: true
        type: choice
        default: ghcr
        options:
          - ghcr
          - awsecr
          - gcp
  workflow_call:
    inputs:
      TARGET_BRANCH:
        description: "The target branch"
        default: ""
        type: string

jobs:
  Package-HelmCharts-for_GHRC:
    if: github.event.inputs.BUILD_ENV == 'ghcr'
    name: Package for GHRC
    environment: ${{ github.event.inputs.BUILD_ENV }}
    runs-on: [self-hosted, Linux, X64]
    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ inputs.TARGET_BRANCH || '' }}
        ssh-key: ${{ secrets.ECS_SSH_PRIVATE_KEY }}
    - name: Push Helm chart to OCI compatible registry (Github)
      uses: bsord/helm-push@develop
      with:
        useOCIRegistry: true
        registry-url:  oci://ghcr.io/devops-teamspace
        username: ${{ secrets.USERNAME }}
        access-token: ${{ secrets.REGISTRY_ACCESS_TOKEN }}
        force: true
        chart-folder: charts/guestbook
    - name: Package, tag, and push tgz to GHCR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: "webportal-v2"
        IMAGE_TAG: ${{ github.sha }}
        DOCKER_BUILDKIT: True
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to EC2.
        pushd charts || exit 1
        helm package ./guestbook
        helm push ./guestbook-0.1.0.tgz oci://ghcr.io/devops-teamspace
        popd
  Package-HelmCharts-for_ECR:
    if: github.event.inputs.BUILD_ENV == 'awsecr'
    name: Building at ECS
    environment: building_variables
    runs-on: [self-hosted, Linux, X64]
    outputs:
      IMAGE: ${{ steps.cn-image.outputs.image }}
      OLD-IMAGE-ID: ${{ steps.cn-image.outputs.old-image-id }}
    steps:
    - uses: actions/checkout@v3
      with:
        ref: ${{ inputs.TARGET_BRANCH || '' }}
        ssh-key: ${{ secrets.ECS_SSH_PRIVATE_KEY }}
    - name: Login to AlibabaCloud ACR Build, tag, and push image to Aliyun ACR
      env:
        IMAGE_TAG: ${{ github.sha }}
        ACR_REGISTRY: "registry.cn-shenzhen.aliyuncs.com/xrspace-server"
        ACR_REPOSITORY: "webportal-v2"
        DOCKER_BUILDKIT: True
      shell: bash
      run: |
        # Build a docker container and
        # push it to ACR so that it can
        # be deployed to ECS.
        ######## ACR push time is too long and temporarily blocked ######################
        # docker login --username=${{ secrets.ACR_USERNAME }} -p ${{ secrets.ACR_PASSWORD }} $ACR_REGISTRY
        # docker push "$ACR_REGISTRY/$ACR_REPOSITORY:$IMAGE_TAG" 
        echo "image='$ACR_REGISTRY/$ACR_REPOSITORY:$IMAGE_TAG'" >> $GITHUB_OUTPUT

        if [[ -z "$(docker inspect $(docker images -q)|grep $IMAGE_TAG)" ]];then
            if [[ -n "$(docker images -f label=app=official-website-v2 -q)" ]];then
              export ID=$(docker images -f label="app=official-website-v2" -q)
              echo "old-image-id=$(docker images -f label='app=official-website-v2' -q)" >> $GITHUB_OUTPUT
            fi
        fi
        docker build -t "$ACR_REGISTRY/$ACR_REPOSITORY:$IMAGE_TAG" . --build-arg locales="tw,us" --build-arg defaultLocale="us" -f deployment/ECS/Dockerfile
        echo "image='$ACR_REGISTRY/$ACR_REPOSITORY:$IMAGE_TAG'" >> $GITHUB_OUTPUT

  Deploy_to_GHCR:
    if: github.event.inputs.BUILD_ENV == 'ghcr'
    environment: deploy_variables_for_dev
    runs-on: [self-hosted, Linux, X64]
    needs: Package-HelmCharts-for_GHRC
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: '${{ secrets.AWS_ACCESS_KEY_ID }}'
        aws-secret-access-key: '${{ secrets.AWS_SECRET_ACCESS_KEY }}'
        aws-region: ap-southeast-1
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_wrapper: false
    - name: Terraform Apply
      run: |
        pushd infra/EC2/ || exit 1
        terraform init
        terraform validate
        terraform plan
        terraform apply -auto-approve
        popd
        pre-commit run --all-files
        ansible-lint deployment
    - name: Ansible Deploy to EC2
      shell: bash
      run: |
        cd deployment/EC2/ || exit 1
        echo '${{ secrets.PEM }}' > ec2.pem 
        chmod 400 ec2.pem
        ansible-playbook -i hosts provision.yml

